swagger: '2.0'
info:
  x-ibm-name: oauth-utils
  title: OAuth Utils
  version: 1.0.0
schemes:
  - https
host: $(catalog.host)
basePath: /oauth-utils
consumes:
  - application/json
produces:
  - application/json
securityDefinitions:
  basic-1:
    type: basic
    description: ''
    x-ibm-authentication-url:
      url: 'https://httpbin.org/get'
x-ibm-configuration:
  testable: true
  enforced: true
  cors:
    enabled: true
  assembly:
    execute:
      - switch:
          title: switch
          case:
            - condition: "((request.verb==='GET')&&(api.operation.path==='/authentication-url'))"
              execute:
                - invoke:
                    title: invoke
                    timeout: 60
                    verb: GET
                    cache-response: protocol
                    cache-ttl: 900
                    stop-on-error: []
                    version: 1.0.0
                    target-url: 'https://raw.githubusercontent.com/YanivYuzis/JsonStore/master/bankData.json'
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: "var reqauth = apim.getvariable('request.authorization').split(' ');\nvar splitval = new Buffer((reqauth[1] || ''), 'base64').toString('utf8').split(':');\nvar username = splitval[0] || '';\nvar password = splitval[1] || '';\n\napim.readInputAsJSON(function(err, bankData) {\n    try {\n        var storedPassword = bankData.allUsers.find(item => item.id === username).password;\n\n        if (storedPassword) {\n            if (password === storedPassword) {\n                session.output.write({ \\\"authenticatedUser\\\": username });\n                //apim.setvariable('message.headers.api-authenticated-credential', 'cn=' + username + ',email=' + username + '@poon.com');\n                apim.setvariable('message.headers.api-authenticated-credential', username);\n                apim.setvariable('message.status.code', 200);\n                apim.setvariable('message.headers.Cache-Control', 'no-cache', 'add')\n                apim.output('application/json');\n            } else {\n                apim.setvariable('message.status.code', 401);\n                apim.setvariable('message.headers.Cache-Control', 'no-cache', 'add')\n                apim.output({\"httpCode\": \"401\", \"httpMessage\": \"Unauthorized\", \"moreInformation\": \"wrong password\"});\n            }\n        } else {\n            apim.setvariable('message.status.code', 401);\n            apim.setvariable('message.headers.Cache-Control', 'no-cache', 'add')\n            apim.output({\"httpCode\": \"401\", \"httpMessage\": \"Unauthorized\", \"moreInformation\": \"user is not registered\"});\n        }\n    } catch (e) {\n        apim.setvariable('message.status.code', 401);\n        apim.setvariable('message.headers.Cache-Control', 'no-cache', 'add')\n        apim.output({\"httpCode\": \"401\", \"httpMessage\": \"Unauthorized\", \"moreInformation\": \"unknown arror\"});\n        //no-store\n    }\n    \n});\n\n"
            - condition: "((request.verb==='GET')&&(api.operation.path==='/onboard-login'))"
              execute:
                - map:
                    title: map
                    inputs: {}
                    outputs:
                      html:
                        schema:
                          type: string
                        variable: message.body
                    actions:
                      - set: html
                        default: "<!DOCTYPE html> <html>    <body>       <h1>Application from for OAuth access</h1>       <form id=\"app_form\" action=\"\">          Client ID:<br>          <input id=\"client_id\" style=\"width:300px\" type=\"text\" name=\"client_id\">          <br><br>Redirect URL:<br>          <input id=\"redirect_uri\" style=\"width:550px\" type=\"text\" name=\"redirect_uri\">          <br><br>Scope:<br>          <input id=\"scope\" style=\"width:150px\" type=\"text\" name=\"scope\">          <br><br><br>          <input type=\"hidden\" name=\"response_type\" value=\"token\">          <input style=\"font-size:20px;\" type=\"submit\" value=\"Submit\">       </form>       <script>         var protocol = window.location.protocol;         var port = window.location.port;         var hostName = window.location.hostname;         var organization = new URL(window.location.href).pathname.split('/')[1];         var catalog = new URL(window.location.href).pathname.split('/')[2];          var urlParams = new URLSearchParams(window.location.search);         var clientId = urlParams.get('clientID') || urlParams.get('clientId') || urlParams.get('clientid') || urlParams.get('client_id') || \"\";         var redirectUrl = urlParams.get('redirectURL') || urlParams.get('redirectUrl') || urlParams.get('redirect_url') || protocol + '://' + port + '/' + hostName + '/' + organization + '/' + catalog + '/oauth-utils/redirect-url';         var scope = urlParams.get('scope') || \"view_accounts\";          document.getElementById('client_id').value = clientId;         document.getElementById('redirect_uri').value = redirectUrl;         document.getElementById('scope').value = scope;          document.getElementById('app_form').action = '/' + organization + '/' + catalog + '/oauth-provider/oauth2/authorize';       </script>    </body> </html>"
                    version: 1.0.0
                - set-variable:
                    title: set-variable
                    actions:
                      - set: message.headers.content-type
                        value: text/html; charset=utf-8
                    version: 1.0.0
            - condition: "((request.verb==='GET')&&(api.operation.path==='/redirect-url'))"
              execute:
                - map:
                    title: map
                    inputs: {}
                    outputs:
                      html:
                        schema:
                          type: string
                        variable: message.body
                    actions:
                      - set: html
                        default: "<!DOCTYPE html> <html>    <body>       <h1>Access Token Info</h1>       <p id=\"oauthInfo\"></p>       <br>       <h2>Test Panel</h2>       Access Token:<br>       <input style=\"width:500px\" id=\"tokenPlaceHolder\" type=\"text\">       <br><br>       <button style=\"font-size:15px;\" onclick=\"getConsent()\">Get Consent</button>       <p id=\"getConsentResponse\"></p>       <br>       <br>Consent ID:<br>       <input style=\"width:200px\" id=\"consentPlaceHolder\" type=\"text\">       <br><br>       <button style=\"font-size:15px;\" onclick=\"getAccountList()\">Test getAccountList</button>       <p id=\"getAccountListResponse\"></p>       <br><br>       <button style=\"font-size:28px;\" onclick=\"restart()\">Restart</button>       <br>       <script>          var urlParams = window.location.hash.substring(1) || \"\";          var accessToken = urlParams.split('=')[1].split('&')[0] || \"\";           document.getElementById(\"oauthInfo\").innerHTML = urlParams.replace(/&/g, '<br>');          document.getElementById(\"tokenPlaceHolder\").value = accessToken;           var protocol = window.location.protocol;          var port = window.location.port;          var hostName = window.location.hostname;          var organization = new URL(window.location.href).pathname.split('/')[1];          var catalog = new URL(window.location.href).pathname.split('/')[2];           function getConsent() {             document.getElementById(\"getConsentResponse\").innerHTML =\"\";              var xmlhttp = new XMLHttpRequest();             var url = protocol + '://' + port + '/' + hostName + '/' + organization + '/' + catalog + '/psd2/v1/consents';              xmlhttp.onreadystatechange = function() {                if (this.readyState == 4) {                   var myArr = JSON.parse(this.responseText);                   myFunction(myArr);                }             };             xmlhttp.open(\"POST\", url, true);             xmlhttp.setRequestHeader(\"Authorization\", 'Bearer ' + document.getElementById(\"tokenPlaceHolder\").value);             xmlhttp.setRequestHeader(\"X-Request-ID\", Math.random() * (999999999 - 100000000));             xmlhttp.send();              function myFunction(myArr) {                document.getElementById(\"getConsentResponse\").innerHTML = JSON.stringify(myArr);                document.getElementById(\"consentPlaceHolder\").value = myArr.consentId;             }          }          function getAccountList() {             document.getElementById(\"getAccountListResponse\").innerHTML =\"\";              var xmlhttp = new XMLHttpRequest();             var url = protocol + '://' + port + '/' + hostName + '/' + organization + '/' + catalog + '/psd2/v1/accounts';              xmlhttp.onreadystatechange = function() {                if (this.readyState == 4) {                   var myArr = JSON.parse(this.responseText);                   myFunction(myArr);                }             };             xmlhttp.open(\"GET\", url, true);             xmlhttp.setRequestHeader(\"Authorization\", 'Bearer ' + document.getElementById(\"tokenPlaceHolder\").value);             xmlhttp.setRequestHeader(\"Consent-ID\", document.getElementById(\"consentPlaceHolder\").value);             xmlhttp.setRequestHeader(\"X-Request-ID\", Math.random() * (999999999 - 100000000));             xmlhttp.send();              function myFunction(myArr) {                document.getElementById(\"getAccountListResponse\").innerHTML = JSON.stringify(myArr);             }          }          function restart() {            window.location.href = protocol + '://' + port + '/' + hostName + '/' + organization + '/' + catalog + '/oauth-utils/onboard-login';          }       </script>    </body> </html>"
                    version: 1.0.0
                - set-variable:
                    title: set-variable
                    actions:
                      - set: message.headers.content-type
                        value: text/html; charset=utf-8
                    version: 1.0.0
            - condition: "((request.verb==='GET')&&(api.operation.path==='/metadata-url'))"
              execute:
                - gatewayscript:
                    title: gatewayscript
                    version: 1.0.0
                    source: |
                      //var transactionId = apim.getvariable('request.headers.x-transaction-id');
                      var globalTransactionId = apim.getvariable('request.headers.x-global-transaction-id');

                      apim.setvariable('message.headers.api-oauth-metadata-for-accesstoken', globalTransactionId);
                      //apim.setvariable('message.headers.api-oauth-metadata-for-payload', globalTransactionId);
          version: 1.0.0
  phase: realized
  gateway: datapower-gateway
paths:
  /authentication-url:
    get:
      responses:
        '200':
          description: 200 OK
      security:
        - basic-1: []
  /onboard-login:
    get:
      responses:
        '200':
          description: 200 OK
  /redirect-url:
    get:
      responses:
        '200':
          description: 200 OK
  /metadata-url:
    get:
      responses:
        '200':
          description: 200 OK
definitions: {}
tags: []
security: []
